<software name="NGSEP" version="5.0.1" date="17-06-2024" jar="NGSEPcore">
<title>Next Generation Sequencing Experience Platform</title>
<url>http://sourceforge.net/projects/ngsep/files/Library/</url>

<commandgroup id="Reads"> 
De-novo and reference guided reads processing
</commandgroup>
<commandgroup id="Discovery">
Variants discovery and genotyping
</commandgroup>
<commandgroup id="VariantsDownstream">
Variants (VCF) downstream analysis
</commandgroup>
<commandgroup id="Genomes">
Analysis of genome assemblies and annotations, including gene models and transcripts
</commandgroup>
<commandgroup id="Benchmark">
Benchmark and simulation
</commandgroup>

<command id="Demultiplex" class="ngsep.sequencing.ReadsDemultiplex" groupId="Reads">
<intro>
Builds individual fastq files for different samples from
a single file containing reads from a whole sequencing lane (Former Deconvolute)
</intro>
<title>Demultiplexing reads</title>
<description>
Builds individual fastq files for different samples from fastq files of
complete sequencing lanes in which several samples were barcoded and sequenced.
Several lane files can be provided with the option -d or a single file can be
provided instead with the option -f (and -f2 for paired-end sequencing).
If neither the -d or the -f options are specified, the program tries to read
single sequencing reads from the standard input.
</description>
<option id="i" type="FILE" attribute="indexFile" >
Tab-delimited file with at least four columns by default: flowcell, lane, barcode
and sampleID. If the -a option for dual barcode is activated, five columns are expected:
flowcell, lane, barcode1, barcode2 and sampleID. The file must have a header line. The same
index file can be used to demultiplex several FASTQ files (see option -d).
</option>
<option id="d" type="FILE" attribute="laneFilesDescriptor" >
Tab-delimited file listing the lane FASTQ files to be demultiplexed. Columns are: Flowcell, lane and
fastq file (which can be gzip compressed). A second fastq file can be specified for pair-end sequencing.
If the reads sequenced for one lane are split in multiple files, each file (or each pair of files)
should be included in a separate row. If this option is used, the options -f, -f2, -c and -l are ignored.
</option>
<option id="o" type="DIR" attribute="outDirectory">
Directory where the output fastq files will be saved. Files will be gzip compressed by default.
</option>
<option id="f" type="FILE" attribute="fastqFile">
File with raw reads in fastq format. It can be gzip compressed.
</option>
<option id="f2" type="FILE" attribute="fastqFile2">
File with raw reads in fastq format corresponding to the second file for paired end reads. It can be gzip compressed.
</option>
<option id="c" type="STRING" attribute="flowcell">
Id of the flowcell corresponding to the input fastq file(s).
Ignored if the -d option is specified but required if -d option is not specified.
</option>
<option id="l" type="STRING" attribute="lane">
Id of the lane corresponding to the input fastq file(s). 
Ignored if the -d option is specified but required if the -d option is not specified.
</option>
<option id="t" type="STRING" attribute="trimSequences">
Sequences to trim separated by comma. If any of the given sequences is found within a read,
the read will be trimmed up to the start of the sequence.
</option>
<option id="u" type="BOOLEAN" attribute="uncompressedOutput">
Output uncompressed files.
</option>
<option id="r" type="INT" attribute="minReadLength" defaultConstant="DEF_MIN_READ_LENGTH">
Minimum read length to keep a read after trimming adapter sequences.
</option>
<option id="a" type="BOOLEAN" attribute="dualBarcode">
Activate demultiplexing with dual barcoding.
</option>
</command>

<command id="FastqFileFilter" class="ngsep.sequences.FastqFileFilter" groupId="Reads">
<intro>
Filtering of raw reads in a fastq file
</intro>
<title>Filtering raw reads</title>
<description>
Filters raw reads in a fastq file by length and average base quality score.
By default it outputs the same input reads 
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file with raw reads in fastq format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Gzip compressed output file with the filtered reads in fastq format.
</option>
<option id="m" type="INT" attribute="minReadLength" defaultConstant="DEF_MIN_READ_LENGTH">
Minimum read length.
</option>
<option id="q" type="INT" attribute="minReadAverageQuality" defaultConstant="DEF_MIN_READ_AVG_QUAL">
Minimum read average quality score.
</option>
</command>

<command id="KmersExtractor" class="ngsep.sequences.KmersExtractor" groupId="Reads" formerId="KmersCounter">
<intro>
Extract k-mers and count abundances from fasta and fastq files
</intro>
<title>Obtaining k-mers spectrum from sequences</title>
<description>
Extracts k-mers and generates a distribution of k-mer abundances from a file of DNA sequences
either in fastq or in fasta format (see -f option).
Writes two files, one with the k-mer distribution and a second file with the actual k-mers and their counts.
</description>
<argument multiple="true">SEQUENCES_FILE</argument>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix of the output files.
</option>
<option id="k" type="INT" attribute="kmerLength" defaultConstant="DEF_KMER_LENGTH">
K-mer length.
</option>
<option id="m" type="INT" attribute="minKmerCount" defaultConstant="DEF_MIN_KMER_COUNT">
Minimum count to report a k-mer in the output file.
</option>
<option id="text" type="BOOLEAN" attribute="freeText">
Indicates that the sequences should be treated as free text.
By default it is assumed that the given sequences are DNA and then only DNA k-mers are counted.
If this option is set, the -s option is also activated to process the text only in the forward direction.
</option>
<option id="s" type="BOOLEAN" attribute="onlyForwardStrand">
If set, only the forward strand would be used to extract kmers. Mandatory for non-DNA sequences.
</option>
<option id="f" type="INT" attribute="inputFormat" defaultConstant="INPUT_FORMAT_FASTQ">
Format of the input file(s). It can be 0 for fastq or 1 for fasta.
</option>
<option id="c" type="BOOLEAN" attribute="ignoreLowComplexity">
Ignore low complexity k-mers for counting and reporting.
</option>
<option id="t" type="INT" attribute="numThreads" defaultConstant="DEF_NUM_THREADS">
Number of threads.
</option>
</command>

<command id="ReadsFileErrorsCorrector" class="ngsep.sequences.ReadsFileErrorsCorrector" groupId="Reads">
<intro>
Corrects errors in read files based on k-mer abundance
</intro>
<title>Fixing sequencing errors</title>
<description>
Builds a k-mer abundance profile and use this profile to identify and correct sequencing errors.
For each predicted single nucleotide error, it looks for the single change that would create k-mers within the normal distribution of abundances.
Using the option -e, this function can also receive a precalculated table of k-mers, which could come from a larger number of reads or reads
sequenced using a different technology. For example, a k-mers profile based on Illumina reads could be built using the KmersExtractor command,
and then this profile could be used to perform error correction on long reads.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file with raw reads in fastq or fasta format. See option -f for options on the file format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with the corrected reads in fastq format (gzip compressed).
</option>
<option id="e" type="FILE" attribute="kmersMapFile">
Two column tab delimited file with k-mers and their abundances.
</option>
<option id="k" type="INT" defaultConstant="DEF_KMER_LENGTH" attribute="kmerLength">
K-mer length.
</option>
<option id="m" type="INT" defaultConstant="DEF_MIN_KMER_COUNT" attribute="minKmerCount">
Minimum k-mer count to consider a k-mer real.
</option>
<option id="s" type="BOOLEAN" attribute="onlyForwardStrand">
If set, only the forward strand would be used to extract kmers. Mandatory for non-DNA sequences.
</option>
<option id="f" type="INT" attribute="inputFormat" defaultConstant="INPUT_FORMAT_FASTQ">
Format of the input file. It can be 0 for fastq or 1 for fasta.
</option>
</command>

<command id="DeNovoGBS" class="ngsep.gbs.KmerPrefixReadsClusteringAlgorithm" groupId="Reads">
<intro>
De novo variants discovery from a GBS experiment
</intro>
<title>Performing de-novo analysis of GBS reads</title>
<description>
Performs de novo variants discovery from a genotype-by-sequencing (GBS) or a double digestion RAD sequencing (ddRAD) experiment.
Runs a clustering algorithm based on quasi-exact matches to representative k-mers within the first base pairs of each sequence.
Then, it performs variants detection and sample genotyping within each cluster using the same Bayesian model implemented for the reference-guided analysis.
By now it can only discover and genotype Single Nucleotide Variants (SNVs).
</description>
<option id="i" type="FILE" attribute="inputDirectory">
Directory with fastq files to be analyzed. Unless the -d option is used, it processes as single reads all fastq files within the given directory.
</option>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix for the output VCF file with the discovered variants and genotype calls as well as other output files describing the behavior of this process.
</option>
<option id="d" type="FILE" attribute="filesDescriptor">
Tab delimited text file listing the FASTQ files to be processed for paired-end sequencing. It should have three columns. sample id, first fastq file and second fastq file.
All files should be located within the directory provided with the option -i.
</option>
<option id="k" type="INT" attribute="kmerLength" defaultConstant="DEF_KMER_LENGTH" >
K-mer length.
</option>
<option id="c" type="INT"  attribute="maxNumClusters" defaultConstant="DEF_MAX_NUM_CLUSTERS">
Maximum number of read clusters to process.
This parameter controls the amount of memory spent by the clustering step of the process.
Larger values can increase sensitivity for large diverse populations at the cost of RAM usage.
</option>
<option id="a" type="INT"  attribute="maxReadsInRAM" defaultConstant="DEF_MAX_READS_IN_RAM">
Maximum number of reads in memory.
This parameter controls the amount of memory spent by the reads sorting process.
Larger values can decrease runtime at the cost of RAM usage. 
</option>
<option id="t" type="INT" attribute="numThreads" defaultConstant="DEF_NUM_THREADS">
Number of threads to process read clusters.
</option>
<option id="maxBaseQS" type="INT" attribute="maxBaseQS" defaultConstant="DEF_MAX_BASE_QS">
Maximum value allowed for a base quality score. Larger values will be equalized to this value.
</option>
<option id="ignore5" type="INT" attribute="basesToIgnore5P" default="0">
Ignore this many base pairs from the 5' end of the reads.
</option>
<option id="ignore3" type="INT" attribute="basesToIgnore3P" default="0">
Ignore this many base pairs from the 3' end of the reads.
</option>
<option id="h" type="DOUBLE" attribute="heterozygosityRate" defaultConstant="DEF_HETEROZYGOSITY_RATE_DIPLOID">
Prior heterozygosity rate.
</option>
<option id="minQuality" type="INT" attribute="minQuality" defaultConstant="DEF_MIN_QUALITY">
Minimum variant quality. In this command, this filter applies to the QUAL column of the VCF, which is
calculated for each variant as the maximum of the genotype qualities of samples with non-homozygous reference genotype calls.
See the command VCFFilter to apply filters of quality and read depth on individual genotype calls.
</option>
<option id="ploidy" type="INT" attribute="normalPloidy" defaultConstant="DEF_PLOIDY">
Default ploidy of the samples.
</option>
</command>

<command id="Assembler" class="ngsep.assembly.Assembler" groupId="Reads">
<intro>
Performs de-novo assembly from long reads
</intro>
<title>Assembling genomes from long reads</title>
<description>
Builds a de-novo assembly from a set of long reads following an overlap-layout-consensus (OLC) approach.
It receives a fasta or fastq file with raw PacBio HiFi or Nanopore reads and generates an assembly for the sample in fasta format.
It also generates a graph.gz file with the information of the overlap graph.
This graph can be provided as input in a second run skip the graph construction step.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file. See option -f for options on the file format . It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix of the output files.
</option>
<option id="g" type="FILE" attribute="graphFile">
File with a saved graph to perform layout and consensus.
</option>
<option id="k" type="INT" attribute="kmerLength" defaultConstant="DEF_KMER_LENGTH">
K-mer length to identify overlaps
</option>
<option id="f" type="INT" attribute="inputFormat" defaultConstant="INPUT_FORMAT_FASTQ">
Format of the input file. It can be 0 for fastq or 1 for fasta.
</option>
<option id="w" type="INT" attribute="windowLength" defaultConstant="DEF_WINDOW_LENGTH">
Window length to calculate minimizers.
</option>
<option id="m" type="INT" attribute="minReadLength" defaultConstant="DEF_MIN_READ_LENGTH">
Minimum read length.
</option>
<option id="q" type="INT" attribute="minReadAverageQuality" defaultConstant="DEF_MIN_READ_AVG_QUAL">
Minimum read average quality score.
</option>
<!-- 
<option id="bh" type="INT" attribute="bpHomopolymerCompression" defaultConstant="DEF_BP_HOMOPOLYMER_COMPRESSION">
Perform homopolymer compression keeping homopolymers up to the given number of pase pairs.
A value less or equal to zero disables homopolymer compression. 
</option>
-->
<option id="mspe" type="DOUBLE" attribute="minScoreProportionEdges" defaultConstant="DEF_MIN_SCORE_PROPORTION_EDGES">
Minimum proportion from the maximum score of the edges of a sequence to keep an edge.
</option>
 
<option id="ploidy" type="INT" attribute="ploidy" defaultConstant="DEF_PLOIDY">
Ploidy of the sample. Keep ploidy of 1 if the sample is inbred, even if it is diploid or polyploid.
This option is still in progress and it has been tested only in haploid and diploid samples.
</option>
<option id="cml" type="INT" attribute="circularMoleculesMaxLength" defaultConstant="DEF_CIRCULAR_MAX_LENGTH">
Maximum length of circular molecules
</option>
<option id="cmof" type="FILE" attribute="circularMoleculesStartsFile">
Fasta file with known start sequences of circular molecules
</option>
<!-- 
<option id="ag" type="STRING" attribute="graphConstructionAlgorithm" defaultConstant="GRAPH_CONSTRUCTION_ALGORITHM_MINIMIZERS" >
Algorithm used to build the graph. It can be Minimizers or FMIndex. Not used if a graph is provided using the option -g.
</option>
 
<option id="al" type="STRING" attribute="layoutAlgorithm" defaultConstant="LAYOUT_ALGORITHM_KRUSKAL_PATH" >
Algorithm used to build the layout. It can be MaxOverlap or KruskalPath.
</option>
-->
<option id="ac" type="STRING" attribute="consensusAlgorithm" defaultConstant="CONSENSUS_ALGORITHM_POLISHING" >
Algorithm used to build the consensus. It can be Simple or Polishing.
</option>
<option id="ecr" type="INT" attribute="errorCorrectionRounds" defaultConstant="DEF_ERROR_CORRCTION_ROUNDS">
Number of rounds of alignment based error correction to perform.
</option>
<option id="skcd" type="BOOLEAN" attribute="skipChimeraDetection">
Turns off the algorithm to detect chimeric sequences.  
</option>
<option id="wid" type="DOUBLE" attribute="weightIndels" defaultConstant="DEF_WEIGHT_INDELS">
Weight given to small indel differences in the calculation of edge costs. Real number between 0 and 1.
Increase if the reads have very low error rate (for example HiFi reads already corrected).  
</option>
<option id="t" type="INT" attribute="numThreads" defaultConstant="DEF_NUM_THREADS">
Number of threads
</option>
</command>

<command id="AssemblyReferenceSorter" class="ngsep.assembly.AssemblyReferenceSorter" groupId="Reads">
<intro>
Sorts contigs of a de-novo assembly by mapping to a reference assembly (Beta)
</intro>
<title>Sorting contigs of genome assemblies (Beta)</title>
<description>
Sorts contigs of a de-novo assembly by mapping to a reference assembly of an individual of either the same or a close species.
It does not join contigs. It only sorts and orient contigs to make the input genome colinear with the reference genome.
WARN: Although we already see good sorting and orientation in many test cases, this functionality is still under testing.
Further improvements are expected for the coming versions.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input genome in FASTA format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file
</option>
<option id="r" type="GENOME" attribute="genome">
Reference genome to map contigs in FASTA format. Required parameter. It can be gzip compressed. 
</option>
<!-- 
<option id="ploidy" type="INT" attribute="ploidy" defaultConstant="DEF_PLOIDY">
Ploidy of the sample. Keep ploidy of 1 if the sample is inbred, even if it is diploid or polyploid.
</option>
 -->
<option id="k" type="INT" attribute="kmerLength" defaultConstant="DEF_KMER_LENGTH">
K-mer length
</option>
<option id="w" type="INT" attribute="windowLength" defaultConstant="DEF_WINDOW_LENGTH">
Window length to calculate minimizers.
</option>
<option id="rcp" type="INT" attribute="renameContigsPolicy" defaultConstant="RENAME_CONTIGS_POLICY_REFNAMES">
Policy to rename contigs. 0: keep input names. 1: Use reference chromosome and relative consecutive numbers. 2: use absolute consecutive numbers.
</option>
<option id="t" type="INT" attribute="numThreads" defaultConstant="DEF_NUM_THREADS">
Number of threads
</option>
</command>

<command id="CircularSequencesProcessor" class="ngsep.assembly.CircularSequencesProcessor" groupId="Reads">
<intro>
Standardize circular contigs in genome assemblies
</intro>
<title>Circularizing genome assemblies</title>
<description>
Standardize the start and orientation of circular sequences in genome assemblies.
It receives a fasta file with the assembly, identifies sequences with repeated ends, and remove redundancies.
A set of start sequences can be provided to map and reorient contigs according to these start sequences.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input genome in FASTA format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file
</option>
<option id="s" type="FILE" attribute="starts">
Fasta file with sequences to be used as start sequences
</option>
<option id="ml" type="INT" attribute="maxLength" defaultConstant="DEF_MAX_LENGTH">
Maximum length of a contig to try circularization. Longer contigs will not be modified
</option>
</command>

<command id="AssemblyGraphStatistics" class="ngsep.assembly.AssemblyGraphStatistics" groupId="Reads" printHelp="false">
<intro>
Calculates statistics from an assembly graph
</intro>
<title>Evaluating assembly graphs</title>
<description>
Collects different statistics about assembly graphs generated by NGSEP.
Also performs evaluation against a gold standard if the input reads are simulated or if they are aligned to a reference genome
</description>
<option id="i" type="FILE" attribute="inputFile">
Input graph to evaluate.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with the graph statistics
</option>
<option id="r" type="FILE" attribute="genome">
Genome to perform benchmarking. If reads were simulated, it should be the base genome used for simulation
</option>
<option id="e" type="FILE" attribute="readsFile">
File with original reads
</option>
<option id="f" type="INT" attribute="readsFormat" defaultConstant="READS_FORMAT_FASTQ">
Format of the reads file. It can be 0 for fastq or 1 for fasta
</option>
<option id="a" type="FILE" attribute="alignmentsFile">
File with alignments to the genome of the reads assembled in the given graph 
</option>
<option id="al" type="STRING" attribute="layoutAlgorithm" defaultConstant="LAYOUT_ALGORITHM_KRUSKAL_PATH" >
Algorithm used to build the layout. It can be MaxOverlap or KruskalPath.
</option>
<option id="mspe" type="DOUBLE" attribute="minScoreProportionEdges" defaultConstant="DEF_MIN_SCORE_PROPORTION_EDGES">
Minimum proportion from the maximum score of the edges of a sequence to keep an edge.
</option>
<option id="s" type="BOOLEAN" attribute="simulated">
Indicates if the reads were simulated using the NGSEP SingleReadsSimulator
</option>
</command>

<command id="IndividualGenomeBuilder" class="ngsep.vcf.VCFIndividualGenomeBuilder" groupId="Reads" formerId="VCFIndividualGenomeBuilder">
<intro>
Builds a genome in fasta format from homozygous variants in a VCF file
</intro>
<title>Updating genomes from variants</title>
<description>
Takes a VCF file with genotype information from one sample and the reference genome used to build
the VCF and generates a new genome in fasta format with a ploidy consistent with the ploidy of the individual.
For diploid or polyploid assemblies, the VCF file must be properly phased.
For non haploid individuals, if the ploidy parameter is set to 1, this function performs polishing of 
a haploid genome assembly. 
</description>
<option id="i" type="GENOME" attribute="genome">
Fasta file with the original genome.
</option>
<option id="v" type="FILE" attribute="variantsFile">
File in VCF format with the variants that will be applied to the input genome.
</option>
<option id="ploidy" type="INT" attribute="ploidy" defaultConstant="DEF_PLOIDY">
Ploidy of the sample. To make polishing of a haploid assembly for a non haploid individual, set this parameter to 1.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file in fasta format with the modified genome.
</option>
</command>

<command id="GenomeIndexer" class="ngsep.genome.GenomeIndexer" groupId="Reads">
<intro>
Creates an FM index to perform short reads alignment
</intro>
<title>Indexing genome reference files</title>
<description>
Creates a binary file containing an FM index for large sequences in fasta format (usually a reference genome).
This structure facilitates performing massive text searches over the indexed sequence.
This is a usual preparation step for alignment of short reads.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input genome to index in fasta format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output binary file with the FM index associated with the input genome.
</option>
</command>

<command id="ReadsAligner" class="ngsep.alignments.ReadsAligner" groupId="Reads">
<intro>
Aligns sequencing reads to a reference genome
</intro>
<title>Aligning reads to reference genomes</title>
<description>
Calculates a list of genomic regions for sites where the reads can be found in a reference genome.
It receives up to two files with raw reads in fastq format and the reference genome.
To map short reads to long genomes, a precalculated FM index can also be provided with the option -d.
See command GenomeIndexer for construction of the FM index.
It provides as output a file with alignments to the reference genome in BAM format.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file with raw reads in fastq format. It can be gzip compressed. Required if the second fastq file is provided using the option -i2.
</option>
<option id="i2" type="FILE" attribute="inputFile2">
Input file with raw reads in fastq format corresponding to the second file for paired end reads. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with the aligned reads in BAM format.
</option>
<option id="r" type="GENOME" attribute="genome">
Reference genome to align reads in FASTA format. Required parameter. It can be gzip compressed. 
</option>
<option id="d" type="FILE" attribute="fmIndexFile">
FM-index of the reference genome to align short reads. See GenomeIndexer for instructions to generate this file.
For large genomes it is more efficient to index the reference once and provide the index with this option.
</option>
<option id="knownSTRs" type="STRING" attribute="knownSTRsFile">
Text file with location of known short tandem repeats (STRs). It is a tab-delimited file with at least three columns:
Sequence name (chromosome), region first base pair coordinate (1-based, inclusive) and region last base pair coordinate (1-based, inclusive).
</option>
<option id="s" type="STRING" attribute="sampleId" defaultConstant="DEF_SAMPLE_ID">
Id of the sample.
</option>
<option id="p" type="STRING" attribute="platform">
Sequencing platform used to produce the reads. 
Supported platforms include ILLUMINA, IONTORRENT, PACBIO and ONT.
If not provided, it will be guessed sampling the first 1000 reads.
</option>
<option id="f" type="INT" attribute="inputFormat" defaultConstant="INPUT_FORMAT_FASTQ">
Format of the input file. It can be 0 for fastq or 1 for fasta.
</option>
<option id="k" type="INT" attribute="kmerLength" defaultConstant="DEF_KMER_LENGTH">
K-mer length.
</option>
<option id="m" type="INT" attribute="maxAlnsPerRead" defaultConstant="DEF_MAX_ALNS_PER_READ">
Maximum alignments per read.
</option>
<option id="minIL" type="INT" attribute="minInsertLength" defaultConstant="DEF_MIN_INSERT_LENGTH">
Minimum predicted insert length to consider an alignment proper.
</option>
<option id="maxIL" type="INT" attribute="maxInsertLength"  defaultConstant="DEF_MAX_INSERT_LENGTH">
Maximum predicted insert length to consider an alignment proper.
</option>
<option id="w" type="INT" attribute="windowLength" defaultConstant="DEF_WINDOW_LENGTH">
Window length to compute minimizers.
</option>
<option id="t" type="INT" attribute="numThreads" defaultConstant="DEF_NUM_THREADS">
Number of threads used to align reads.
</option>
</command>

<command id="BasePairQualStats" class="ngsep.alignments.BasePairQualityStatisticsCalculator" groupId="Reads" formerId="QualStats">
<intro> Detects sequencing error biases</intro>
<title>Calculating base pair quality statistics</title>
<description>
Takes one or more sets of alignments and a reference genome and
counts the number of mismatches with the reference for each read position from
5' to 3' end. This report is useful to detect sequencing error biases.
Requires one or more alignment files in SAM, BAM or CRAM format, and the reference genome that
was used to produce the alignments.
Writes to standard output unless the -o option is used to specify an output file.
</description>
<argument multiple="true">ALIGNMENTS_FILE</argument>
<option id="o" type="FILE" attribute="outputFile">
Output file with the base pair quality statistics.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="minMQ" type="INT" attribute="minMQ" defaultConstant="DEF_MIN_MQ_UNIQUE_ALIGNMENT">
Minimum mapping quality to call an alignment unique.
</option>
</command>

<command id="CoverageStats" class="ngsep.discovery.CoverageStatisticsCalculator" groupId="Reads">
<intro>Shows the uniformity of the sequencing process over the genome</intro>
<title>Calculating coverage statistics</title>
<description>
Calculates the number of base pairs that are covered by reads at
each read depth level from 1 to a maximum. Alignments must be in SAM, BAM or CRAM format.
Writes to standard output unless the -o option is used to specify an output file.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file with alignments to analyze.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with the coverage distribution.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome. Required for CRAM files.
</option>
<option id="minMQ" type="INT" attribute="minMQ" defaultConstant="DEF_MIN_MQ_UNIQUE_ALIGNMENT">
Minimum mapping quality to call an alignment unique.
</option>
</command>

<command id="MultisampleVariantsDetector" class="ngsep.discovery.MultisampleVariantsDetector" groupId="Discovery">
<intro>Module for direct calculation of variants from multiple samples.</intro>
<title>Calling variants over multiple samples</title>
<description>
This module allows to call variants over a group of samples separated by files or read group tags.
This is now the recommended method to perform variants detection on genotype-by-sequencing (GBS), RAD sequencing,
whole exome sequencing (WES), RNA-seq and low coverage (less than 10x) whole genome sequencing (WGS) data.
Although it can also be used on high coverage WGS data, the classic sample-by-sample analysis
(commands FindVariants, MergeVariants and MergeVCF) is still recommended to identify structural variants.
This module requires one or more read alignment files in SAM, BAM or CRAM format and the reference genome that was used to produce the alignments.
Alignments must be sorted by reference coordinates.
</description>
<argument multiple="true">ALIGNMENTS_FILE</argument>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="o" type="FILE" attribute="outFilename" defaultConstant="DEF_OUTPUT_FILE">
Output VCF file with discovered variants and genotype calls.
</option>
<option id="ploidy" type="INT" attribute="normalPloidy" defaultConstant="DEF_PLOIDY">
Default ploidy of the samples.
</option>
<option id="psp" type="BOOLEAN" attribute="printSamplePloidy">
Print id and ploidy of the sample in the VCF header.
The header generated with this option is not a standard VCF header.
However, it helps NGSEP to keep track of the ploidy of the samples through downstream analyses.
</option>
<option id="minMQ" type="INT" attribute="minMQ" defaultConstant="DEF_MIN_MQ">
Minimum mapping quality to call an alignment unique.
</option>
<option id="knownVariants" type="FILE" attribute="knownVariantsFile">
VCF file with variants to be genotyped. Only these variants will appear in the output VCF.
</option>
<option id="querySeq" type="STRING" attribute="querySeq">
Call variants just for this sequence.
</option>
<option id="first" type="INT" attribute="queryFirst">
Call variants just from this position in the given query sequence.
</option>
<option id="last" type="INT"  attribute="queryLast">
Call variants just until this position in the given query sequence.
</option>
<option id="ignoreLowerCaseRef" type="BOOLEAN" attribute="ignoreLowerCaseRef">
Ignore sites where the reference allele is lower case.
</option>
<option id="maxAlnsPerStartPos" type="INT" attribute="maxAlnsPerStartPos" defaultConstant="DEF_MAX_ALNS_PER_START_POS">
Maximum number of alignments allowed to start at the same reference site.
This parameter helps to control false positives produced by PCR amplification artifacts.
In this command, this filter is executed independently for each read group.
For GBS or RAD sequencing data use a large value such as 100.
</option>
<option id="p" type="BOOLEAN" attribute="processNonUniquePrimaryAlignments">
Process non unique primary alignments in the pileup process.
The default behavior is to process alignments that are unique (see option -minMQ).
</option> 
<option id="s" type="BOOLEAN" attribute="processSecondaryAlignments">
Consider secondary alignments in the pileup process. Non-unique primary alignments will also be considered in this mode.
</option>
<option id="ignore5" type="INT" attribute="basesToIgnore5P" default="0">
Ignore this many base pairs from the 5' end of the reads.
</option>
<option id="ignore3" type="INT" attribute="basesToIgnore3P" default="0">
Ignore this many base pairs from the 3' end of the reads.
</option>
<option id="h" type="DOUBLE" attribute="heterozygosityRate" defaultConstant="DEF_HETEROZYGOSITY_RATE_DIPLOID">
Prior heterozygosity rate.
</option>
<option id="maxBaseQS" type="INT" attribute="maxBaseQS" defaultConstant="DEF_MAX_BASE_QS">
Maximum value allowed for a base quality score. Larger values will be equalized to this value.
</option>
<option id="knownSTRs" type="FILE" attribute="knownSTRsFile">
File with known short tandem repeats (STRs). This is a text file with at least three
columns: chromosome, first position and last position. Positions should be 1-based and
inclusive.
</option>
<option id="minQuality" type="INT" attribute="minQuality" defaultConstant="DEF_MIN_QUALITY">
Minimum variant quality. In this command, this filter applies to the QUAL column of the VCF, which is
calculated for each variant as the maximum of the genotype qualities of samples with non-homozygous reference genotype calls.
See the command VCFFilter to apply filters of quality and read depth on individual genotype calls.
</option>
<option id="embeddedSNVs" type="BOOLEAN" attribute="callEmbeddedSNVs">
Flag to call SNVs within STRs. By default, STRs are treated as a single locus and hence no SNV will be called within an STR.
</option>
</command>

<command id="SingleSampleVariantsDetector" class="ngsep.discovery.SingleSampleVariantsDetector" groupId="Discovery" formerId="FindVariants">
<intro>The classic module of NGSEP for variants detection in individual samples.</intro>
<title>Calling variants on individual samples with the variants detector</title>
<description>
This is the classic module of NGSEP to call SNVs, small indels and structural
variants from sequencing data of single individuals. Basic usage requires an
alignments file in SAM, BAM or CRAM format, the reference genome that was used to
produce the alignments, and a prefix for the output files.
Alignments must be sorted by reference coordinates.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file with read alignments.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix for the output files.
</option>
<option id="sampleId" type="STRING" attribute="sampleId" defaultConstant="DEF_SAMPLE_ID">
Id of the sample for the VCF file. If not set it looks in the input file header for an SM header tag. 
If this tag is not present, it uses the default value.
</option>
<option id="ploidy" type="INT" attribute="normalPloidy" defaultConstant="DEF_PLOIDY">
Ploidy of the sample.
</option>
<option id="psp" type="BOOLEAN" attribute="printSamplePloidy">
Print id and ploidy of the sample in the VCF header.
The header generated with this option is not a standard VCF header.
However, it helps NGSEP to keep track of the ploidy of each sample through downstream analyses.
</option>
<option id="minMQ" type="INT" attribute="minMQ" defaultConstant="DEF_MIN_MQ">
Minimum mapping quality to call an alignment unique.
</option>
<option id="knownVariants" type="FILE" attribute="knownVariantsFile">
VCF file with variants to be genotyped. Only these variants will appear in the output VCF.
With this option homozygous calls to the reference allele will be reported.
</option>
<option id="querySeq" type="STRING" attribute="querySeq">
Call variants just for this sequence.
</option>
<option id="first" type="INT" attribute="queryFirst">
Call variants just from this position in the given query sequence.
</option>
<option id="last" type="INT"  attribute="queryLast">
Call variants just until this position in the given query sequence.
</option>
<option id="ignoreLowerCaseRef" type="BOOLEAN" attribute="ignoreLowerCaseRef">
Ignore sites where the reference allele is lower case.
</option>
<option id="maxAlnsPerStartPos" type="INT" attribute="maxAlnsPerStartPos" defaultConstant="DEF_MAX_ALNS_PER_START_POS">
Maximum number of alignments allowed to start at the same reference site.
This parameter helps to control false positives produced by PCR amplification artifacts.
For GBS or RAD sequencing data use a large value such as 100.
</option>
<option id="p" type="BOOLEAN" attribute="processNonUniquePrimaryAlignments">
Process non unique primary alignments in the pileup process. 
The default behavior is to process alignments that are unique (see option -minMQ). 
</option> 
<option id="s" type="BOOLEAN" attribute="processSecondaryAlignments">
Consider secondary alignments in the pileup process.
Non-unique primary alignments will also be considered in this mode.
</option>
<option id="ignore5" type="INT" attribute="basesToIgnore5P" default="0">
Ignore this many base pairs from the 5' end of the reads.
</option>
<option id="ignore3" type="INT" attribute="basesToIgnore3P" default="0">
Ignore this many base pairs from the 3' end of the reads.
</option>
<option id="h" type="DOUBLE" attribute="heterozygosityRate" defaultConstant="DEF_HETEROZYGOSITY_RATE_DIPLOID">
Prior heterozygosity rate.
</option>
<option id="maxBaseQS" type="INT" attribute="maxBaseQS" defaultConstant="DEF_MAX_BASE_QS">
Maximum value allowed for a base quality score. Larger values will be equalized to this value.
</option>
<option id="knownSTRs" type="FILE" attribute="knownSTRsFile">
File with known short tandem repeats (STRs). This is a text file with at least three
columns: chromosome, first position and last position. Positions should be 1-based and
inclusive.
</option>
<option id="minQuality" type="INT" attribute="minQuality" defaultConstant="DEF_MIN_QUALITY">
Minimum genotype quality to accept a SNV call.
Genotype quality is calculated as 1 minus the posterior probability of the genotype given the reads (in phred scale).
</option>
<option id="embeddedSNVs" type="BOOLEAN" attribute="callEmbeddedSNVs">
Flag to call SNVs within STRs.
By default, STRs are treated as a single locus and hence no SNV will be called within an STR.
</option>
<option id="csb" type="BOOLEAN" attribute="calcStrandBias">
Calculate a exact fisher test p-value for strand bias between the reference and the alternative allele.
</option>
<option id="knownSVs" type="FILE" attribute="knownSVsFile">
File with coordinates of known structural variants in GFF format.
</option>
<option id="minSVQuality" type="INT" attribute="minSVQuality" defaultConstant="DEF_MIN_SV_QUALITY">
Minimum quality score (in PHRED scale) for structural variants.
</option>
<option id="runRep" type="BOOLEAN" attribute="findRepeats">
Turns on the procedure to find repetitive regions based on reads with multiple alignments.
</option>
<option id="runRD" type="BOOLEAN" attribute="runRDAnalysis">
Turns on read depth (RD) analysis to identify CNVs.
</option>
<option id="noNewCNV" type="BOOLEAN" deprecated="true">
Deprecated. Now this is the default behavior if known SVs are provided.
</option>
<option id="genomeSize" type="INT" attribute="inputGenomeSize">
Total size of the genome to use during detection of CNVs. This should be used when the reference file only includes a part of
the genome (e.g. a chromosome or a partial assembly).
</option>
<option id="binSize" type="INT" attribute="binSize" defaultConstant="DEF_BIN_SIZE">
Size of the bins to analyze read depth.
</option>
<option id="algCNV" type="STRING" attribute="algCNV" defaultConstant="DEF_ALGORITHM_CNV">
Comma-separated list of read depth algorithms to run (e.g. CNVnator,EWT).
</option>
<option id="maxPCTOverlapCNVs" type="INT" attribute="maxPCTOverlapCNVs" defaultConstant="DEF_MAX_PCT_OVERLAP_CNVS">
Maximum percentage of overlap of a new CNV with an input CNV to include it in the output.
</option>
<option id="runRP" type="BOOLEAN" attribute="runRPAnalysis">
Turns on read pair plus split-read analysis (RP+SR) to identify large indels and inversions.
</option>
<option id="maxLenDeletion" type="INT" attribute="maxLengthDeletion" defaultConstant="DEF_MAX_LEN_DELETION">
Maximum length of deletions that the read-pair analysis can identify.
</option>
<option id="sizeSRSeed" type="INT" attribute="splitReadSeed" defaultConstant="DEF_SPLIT_READ_SEED">
Size of the seed to look for split-read alignments.
</option>
<option id="ignoreProperPairFlag" type="BOOLEAN" attribute="ignoreProperPairFlag">
With this option, the proper pair flag will not be taken into accout to decide if the ends of each fragment are properly aligned.
By default, the distribution of insert length is estimated only taking into account reads with the proper pair flag turned on.
</option>
<option id="runOnlySVs" type="BOOLEAN" attribute="runOnlySVsAnalyses">
Turns off detection of SNVs and small indels. In this mode, only structural variation will be called.
</option>
<option id="runLongReadSVs" type="BOOLEAN" attribute="runLongReadSVs">
Runs the DBScan algorithm to identify structural variants from alignments of long reads.
</option>
</command>

<command id="SIH" class="ngsep.haplotyping.SingleIndividualHaplotyper" groupId="Discovery">
<intro>
Performs molecular haplotyping of single diploid individuals 
</intro>
<title>Molecular haplotyping of single individuals</title>
<description>
Performs molecular haplotyping on a single individual given a VCF and a set of alignments in SAM, BAM or CRAM format.
Although theoretically it can work with Illumina reads, it is designed to work fine with long (PacBio) reads.
Alignments must be sorted by reference coordinates.
Writes to standard output unless the -o option is used to specify an output file.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input VCF file with variants to phase.
</option>
<option id="b" type="FILE" attribute="alignmentsFile">
Input file with read alignments.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output VCF file with phased variants.
</option>
<option id="a" type="STRING" attribute="algorithmName" defaultConstant="DEF_ALGORITHM_NAME" >
Algorithm for single individual haplotyping. It can be Refhap or DGS.
</option>
<option id="minMQ" type="INT" attribute="minMQ" defaultConstant="DEF_MIN_MQ">
Minimum mapping quality to call an alignment unique.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome. Required for CRAM files.
</option>
</command>

<command id="MergeVariants" class="ngsep.vcf.IndividualSampleVariantsMerge" groupId="Discovery">
<intro>
Generates a VCF file including the whole set of variants called in at least one of the given samples.
</intro>
<title>Merging variants from individual samples</title>
<description>
First step merging variants from different samples into an integrated VCF file.
Generates a file including the whole set of variants called in at least one sample.
The sequence names file is a text file with the ids of the sequences in the reference.
</description>
<argument multiple="true">VARIANTS_FILE</argument>
<option id="s" type="FILE" attribute="sequenceNamesFile">
List of sequence names as they appear in the original reference genome 
</option>
<option id="o" type="FILE" attribute="outputFile">
Output VCF file with merged variants
</option>
</command>

<command id="VCFMerge" class="ngsep.vcf.ConsistentVCFFilesMerge" groupId="Discovery" formerId="MergeVCF">
<intro>
Writes a final VCF file with the genotype calls for each variant on each sample.
</intro>
<title>Merging variants from individual samples</title>
<description>
Last step to merge genotype calls from different samples into an integrated VCF file.
Generates a file including the whole set of variants called for all samples.
The sequence names file is a text file with the ids of the sequences in the reference.
Writes to standard output unless the -o option is used to specify an output file.
</description>
<argument multiple="true">GENOTYPED_VARIANTS_FILE</argument>
<option id="s" type="FILE" attribute="sequenceNamesFile">
List of sequence names as they appear in the original reference genome 
</option>
<option id="o" type="FILE" attribute="outputFile">
Output VCF file with merged variants and genotype information
</option>
</command>

<command id="TillingPoolsIndividualGenotyper" class="ngsep.discovery.TillingPoolsIndividualGenotyper" groupId="Discovery">
<intro>
Discover individual variants from pool variants for a tilling experiment 
</intro>
<title>Tilling variants individual assignment</title>
<description>
For tilling experiments, this module takes variants from pools and a pools descriptor and calls individual variants.
It receives a list of VCF files generated either by the SingleSampleVariantsDetector or the MultisampleVariantsDetector commands and a pools configuration file
and generates a VCF file with individual genotyping based on the variants identified within the pools.
See the README.txt file for further details of input and output files.
</description>
<argument multiple="true">VCF_FILE</argument>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with called variants in VCF format.
</option>
<option id="d" type="FILE" attribute="poolsDescriptor">
File with the information of individuals assigned to each pool. 
</option>
<option id="m" type="INT" attribute="maxPools">
Maximum number of pools in which a variant can appear. Default 0 (no filter).
</option>
<option id="b" type="BOOLEAN" attribute="onlyBiallelic">
Report only biallelic variants.
</option>

</command>

<command id="RelativeAlleleCountsCalculator" class="ngsep.discovery.RelativeAlleleCountsCalculator" groupId="Discovery" formerId="RelativeAlleleCounts">
<intro>
Calculates the distribution of relative allele counts 
</intro>
<title>Obtaining relative allele counts from read alignment files</title>
<description>
Calculates a distribution of relative allele counts for sites showing base calls for more than one
nucleotide from read alignment files in SAM, BAM or CRAM format. This analysis is useful to predict the ploidy
of a sequenced sample.
Alignments must be sorted by reference coordinates.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file with read alignments.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with statistics.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome. Required for CRAM files.
</option>
<option id="m" type="INT" attribute="minRD" defaultConstant="DEF_MIN_RD">
Minimum read depth.
</option>
<option id="M" type="INT" attribute="maxRD" defaultConstant="DEF_MAX_RD">
Maximum read depth.
</option>
<option id="q" type="INT" attribute="minBaseQualityScore" defaultConstant="DEF_MIN_BASE_QUALITY_SCORE">
Minimum base quality score (Phred scale).
</option>
<option id="frs" type="FILE" attribute="regionsToFilter">
File with repeats (or any kind of genomic regions) that should not be taken into account in the analysis.
The format of this file should contain three columns: Sequence name (chromosome), first position
in the sequence, and last position in the sequence. Both positions are assumed to be 1-based.
</option>
<option id="srs" type="FILE" attribute="regionsToSelect">
File with genomic regions that should be taken into account in the analysis.
The format of this file should contain three columns: Sequence name (chromosome), first position
in the sequence, and last position in the sequence. Both positions are assumed to be 1-based.
</option>
<option id="of" type="FILE" attribute="outputFileFullCounts">
Separate output file with the complete counts information for sites with more than one allele.
The file has the following data separated by tab: sequence name, position, read depth, number of different alleles, max depth, second max depth  
</option>
<option id="s" type="BOOLEAN" attribute="secondaryAlns">
Consider secondary alignments. By default, only primary alignments are processed.
</option>
</command>

<command id="ReadDepthComparator" class="ngsep.discovery.rd.CNVseqAlgorithm" groupId="Discovery" formerId="CompareRD">
<intro>
Compares the read depth of two samples
</intro>
<title>Comparing read depth between samples</title>
<description>
This function compares the read depth of two samples to predict regions with relative copy number variation (CNV) between a sample and a control.
It takes two alignment files and a reference genome, splits the genome into windows, and for each window compares the read depth between the two samples.
It outputs a text file containing the list of windows of the genome in which the normalized read depth ratio between the two samples is significantly different from 1 (See README.txt for details).
Alignments can be provided in SAM, BAM or CRAM format and must be sorted by reference coordinates.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file with alignments to a reference genome.
</option>
<option id="c" type="FILE" attribute="controlFile">
Input alignments file corresponding to the control (wild type) sample.
</option>
<option id="o" type="FILE" attribute="outputFile">
File with genomic regions in which the two samples have different read depth.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="w" type="INT" attribute="binSize" defaultConstant="DEF_WINDOW_SIZE">
Window length to be used during the read depth comparison.
</option>
<option id="p" type="DOUBLE" attribute="maxPValue" defaultConstant="DEF_MAX_PVALUE">
Maximum p-value. Only the windows with a p-value lower than that specified will be reported.
</option>
<option id="a" type="BOOLEAN" attribute="printAllWindows">
Output an entry for every window in the genome.
</option>
<option id="gc" type="BOOLEAN" attribute="gcCorrection">
Perform GC-correction of the read depth.
</option>
<option id="b" type="BOOLEAN" attribute="bonferroni">
Perform the Bonferroni correction for multiple testing.
</option>
</command>

<command id="TranscriptomeAnalyzer" class="ngsep.transcriptome.TranscriptomeAnalyzer" groupId="Genomes">
<intro>
Provides statistics on a transcriptome file in GFF3 format
</intro>
<title>Evaluating transcriptome assemblies</title>
<description>
Loads a transcriptome annotation in GFF3 format, logs format errors, provides statistics on the assembled transcriptome,
and generates cDNA, CDS and protein sequences. 
</description>
<option id="i" type="FILE" attribute="inputFile">
Input GFF3 file with gene annotations. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix of the output files. It can be an absolute path finished by the prefix.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome. It can be gzip compressed.
</option>
</command>

<command id="TranscriptomeFilter" class="ngsep.transcriptome.TranscriptomeFilter" groupId="Genomes">
<intro>
Executes filter criteria on a transcriptome file in GFF3 format
</intro>
<title>Filtering transcriptomes</title>
<description>
Loads a transcriptome annotation in GFF3 format and generates a filtered file by CDS length, presence of start and stop codons and intersection with other regions.
Writes to standard output unless the -o option is used to specify an output file.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input GFF3 file with gene annotations. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with filtered genes. See option -f for output format options.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="f" type="INT" attribute="outputFormat" defaultConstant="FORMAT_GFF">
Output format. 0: GFF3, 1: gene list, 2: gene regions, 3: transcript list, 4: transcript regions.
</option>
<option id="c" type="BOOLEAN" attribute="selectCompleteProteins">
Output only complete transcripts (with start and stop codons) in the output file.
</option>
<option id="l" type="INT" attribute="minProteinLength" defaultConstant="DEF_MIN_PROTEIN_LENGTH">
Minimum protein length for coding transcripts in the output file.
</option>
<option id="frs" type="FILE" attribute="regionsToFilter">
File with genomic regions in which transcripts should be filtered out.
The format of this file should contain three columns: Sequence name (chromosome), first position
in the sequence, and last position in the sequence. Both positions are assumed to be 1-based.
</option>
<option id="srs" type="FILE" attribute="regionsToSelect">
File with genomic regions in which transcripts should be selected.
The format of this file should contain three columns: Sequence name (chromosome), first position
in the sequence, and last position in the sequence. Both positions are assumed to be 1-based.
</option>
<option id="ioe" type="BOOLEAN" attribute="intersectOnlyExons">
Take only the exons into account to decide if a transcript intersects with a given region.
This is useful to keep (or remove) transcripts having intersection with regions only in intron segments.  
</option>
<option id="fgid" type="FILE" attribute="geneIdsToFilter">
File with ids of genes that should be filtered out.
The first column should have the gene ids. Other columns are ignored.
</option>
<option id="sgid" type="FILE" attribute="geneIdsToSelect">
File with ids of genes that should be selected.
The first column should have the gene ids. Other columns are ignored.
</option>
</command>

<command id="OrthogroupsFunctionalAnnotator" class="ngsep.transcriptome.OrthogroupsFunctionalAnnotator" groupId="Genomes"> 
<intro>
This module takes the functional annotations generated by Trinotate and integrate that information in orthology clusters
</intro>
<title>Annotate clusters</title>
<description>
This module takes the functional annotations generated by Trinote and the cluster information generated by NGSEP and integrate all information
</description>
<option id="d" type="FILE" attribute="clustersFilePath">
Cluster file path generated by NGSEP
</option>
<option id="n" type="FILE" attribute="functionalNotationFilePath">
Annotation file generated by Trinotate, a tsv that match with following format:
0       #gene_id
1       transcript_id
2       sprot_Top_BLASTX_hit
3       infernal
4       prot_id
5       prot_coords
6       sprot_Top_BLASTP_hit
7       Pfam
8       SignalP
9       TmHMM
10      eggnog
11      Kegg
12      gene_ontology_BLASTX
13      gene_ontology_BLASTP
14      gene_ontology_Pfam
15      transcript # optional, use --incl_trans
16      peptide # optional, use --incl_pep
For this functionality, only BLAST columns will be consider
</option>
<option id="o" type="FILE" attribute="fileOut">
Output file in TSV, the first column is the cluster ID, the second the functional annotations related with genes in that cluster separated by comma
</option>
</command>




<command id="GenomesAligner" class="ngsep.genome.GenomesAligner" groupId="Genomes">
<intro>
Compares two partially or completely assembled genomes based on their gene annotations
</intro>
<title>Comparing genomes</title>
<description>
This module takes a list of assembled genomes in fasta format and their corresponding transcriptomes in GFF3 format and runs whole genome comparisons.
It calculates orthogroups including orthologs and paralogs.
It also identifies synteny relationships between each pair of genomes.
Finally, it calculates gene presence/absence matrices and classifies gene families as core or accessory.
See the README.txt file for further details of input and output files.
</description>
<argument>GENOME1</argument>
<argument>TRANSCRIPTOME1</argument>
<argument>GENOME2</argument>
<argument>TRANSCRIPTOME2</argument>
<option id="d" type="STRING" attribute="inputDirectory">
Directory having the input genomes in fasta format and the genome annotations in gff3 format.
</option>
<option id="i" type="STRING" attribute="inputFile">
Input file with genome identifiers. These identifiers are used as prefixes for the fasta and gff3 files.
</option>
<option id="o" type="STRING" attribute="outputPrefix" defaultConstant="DEF_OUT_PREFIX">
Prefix for output files.
</option>
<option id="k" type="INT" attribute="kmerLength" defaultConstant="DEF_KMER_LENGTH">
K-mer length to find orthologs.
</option>
<option id="p" type="INT" attribute="minPctKmers" defaultConstant="DEF_MIN_PCT_KMERS">
Minimum percentage of k-mers to call orthologs.
</option>
<option id="r" type="INT" attribute="referenceGenomeId">
One-based id of the genome to be used as a reference to align other genomes.
By default genomes will not be modified.  
</option>
<option id="s" type="BOOLEAN" attribute="skipMCL">
Skip the MCL clustering phase and return unfiltered orthogroups.
</option>
<option id="yh" type="INT" attribute="minHomologUnitsBlock" defaultConstant="DEF_MIN_HOMOLOGY_UNITS_BLOCK">
Minimum number of consistent homology units to call a synteny block.
</option>
<option id="yd" type="INT" attribute="maxDistanceBetweenUnits" defaultConstant="DEF_MAX_DISTANCE_BETWEEN_UNITS">
Maximum distance (in basepairs) between homology units to include them within the same synteny block.
</option>
<option id="f" type="DOUBLE" attribute="minFrequencySoftCore" defaultConstant="DEF_MIN_FREQUENCY_SOFT_CORE">
Minimum frequency to classify soft core gene families.
</option>
<option id="t" type="INT" attribute="numThreads" defaultConstant="DEF_NUM_THREADS">
Number of threads.
</option>


<!--
<option id="MH" type="INT" defaultConstant="DEF_MAX_HOMOLOGS_UNIT" attribute="maxHomologsUnit">
Maximum number of homologs per unit to be displayed in the D3 visualization
</option>
-->
</command>

<command id="CDNACatalogAligner" class="ngsep.genome.CDNACatalogAligner" groupId="Genomes">
<intro>Infers ortholog groups from a set of transcriptomes</intro>
<title>Clustering orthologs from CDNA catalogs</title>
<description>
This module takes cDNA transcriptomes in fasta format, infers orthology relationships and cluster orthologs.
See the README.txt file for further details of input and output files.
</description>
<argument multiple="true">TRANSCRIPTOME</argument>
<option id="o" type="STRING" attribute="outputPrefix" defaultConstant="DEF_OUT_PREFIX">
Prefix of output files.
</option>
<option id="k" type="INT" attribute="kmerLength" defaultConstant="DEF_KMER_LENGTH">
K-mer length to find orthologs.
</option>
<option id="p" type="INT" attribute="minPctKmers" defaultConstant="DEF_MIN_PCT_KMERS">
Minimum percentage of k-mers to call orthologs
</option>
<option id="s" type="BOOLEAN" attribute="skipMCL">
Skip the MCL clustering phase and returns unfiltered orthogroups.
</option>
<option id="y" type="INT" attribute="inputType" defaultConstant="INPUT_TYPE_CDNA">
Type of sequences in the input file. 1 for CDNA, 2 for proteins.
</option>
<option id="t" type="INT" attribute="numThreads" defaultConstant="DEF_NUM_THREADS">
Number of threads.
</option>
</command>

<command id="TransposonsFinder" class="ngsep.genome.TransposableElementsFinder" groupId="Genomes">
<intro>
Annotates transposable elements in a genome assembly
</intro>
<title>Identifying transposable elements</title>
<description>
Receives a genome assembly in fasta format and a file with known transposable elements (TEs) and annotates regions
in the assembly with TEs.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input genome to annotate in fasta format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with annotations of transposable elements
</option>
<option id="d" type="FILE" attribute="transposonsDatabaseFile">
Database of transposable elements to annotate the genome
</option>
<option id="m" type="INT" attribute="minTELength" defaultConstant="DEF_MIN_TE_LENGTH">
Minimum length (in basepairs) to call a transposable element.
</option>
<option id="r" type="INT" attribute="rounds" defaultConstant="DEF_ROUNDS">
Number of search rounds to identify new TEs from previously identified TEs.
</option>
<option id="t" type="INT" attribute="numThreads" defaultConstant="DEF_NUM_THREADS">
Number of threads.
</option>
</command>

<command id="TransposonStats" class="ngsep.genome.TransposableElementStatistics" groupId="Genomes">
<intro>
Calculates statistics for annotations of transposable elements
</intro>
<title>Calculating statistics on transposable elements</title>
<description>
Receives a file generated by the NGSEP transposons finder and calculates statistics on number of events and span per family.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file with annotations of transposable elements
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with statistics per family
</option>
</command>

<command id="GenomeAssemblyMask" class="ngsep.genome.GenomeAssemblyMask" groupId="Genomes">
<intro>
Masks regions in a genome assembly
</intro>
<title>Masking regions in a genome assembly</title>
<description>
Receives a genome assembly in fasta format and a file of regions (typically repeats) and masks the regions in the genome, either with lowercase characters or with Ns.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input genome to mask. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with the masked genome
</option>
<option id="d" type="FILE" attribute="regionsFile">
Genomic regions to mask. It must have at least three columns: sequence name (chromosome), 1-based first position and 1-based last position.
</option>
<option id="h" type="BOOLEAN" attribute="hardMask">
Mask with N characters. The default is to mask with lowercase characters.
</option>
</command>

<command id="VCFAnnotate" class="ngsep.vcf.VCFFunctionalAnnotator" groupId="VariantsDownstream" formerId="Annotate">
<intro>Generates a VCF file which includes the functional information related with each variant.
</intro>
<title>Functional annotation of variants</title>
<description>
Generates a VCF file including the functional information related to each variant.
Requires a gff3 file with gene annotations, and the reference genome in fasta format.
Reads from standard input unless the -i option is used to specify an input file.
Writes to standard output unless the -o option is used to specify an output file.
See the README.txt file for further details of input and output files.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input VCF file with variants to annotate. It can be gzip compressed.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="t" type="FILE" attribute="transcriptomeFile">
Input GFF3 file with gene annotations.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output VCF file with annotated variants.
</option>
<option id="u" type="INT" attribute="offsetUpstream" defaultConstant="DEF_UPSTREAM">
Maximum bp before the start of a transcript to classify a variant as Upstream.
</option>
<option id="d" type="INT" attribute="offsetDownstream" defaultConstant="DEF_DOWNSTREAM">
Maximum bp after the end of a transcript to classify a variant as Downstream.
</option>
<option id="sd" type="INT" attribute="spliceDonorOffset" defaultConstant="DEF_SPLICE_DONOR">
Initial basepairs of an intron that should be considered as splice donor.
</option>
<option id="sa" type="INT" attribute="spliceAcceptorOffset" defaultConstant="DEF_SPLICE_ACCEPTOR">
Final basepairs of an intron that should be considered as splice acceptor.
</option>
<option id="si" type="INT" attribute="spliceRegionIntronOffset" defaultConstant="DEF_SPLICE_REGION_INTRON">
Initial or final basepairs of an intron that should be considered as part of the splice region.
</option>
<option id="se" type="INT" attribute="spliceRegionExonOffset" defaultConstant="DEF_SPLICE_REGION_EXON">
Initial or final basepairs of an exon that should be considered as part of the splice region.
</option>
</command>

<command id="VCFFilter" class="ngsep.vcf.VCFFilter" groupId="VariantsDownstream" formerId="FilterVCF">
<intro>Implements different filters on VCF files with genotype information</intro>
<title>Filtering VCF files</title>
<description>
This module implements different filters on VCF files with genotype information and generates a VCF file with variants passing the filtering criteria.
First, it executes the distance filter (-d), then the filtering of
samples and genotypes (-saf, -fs, -q and -minRD). Finally, it 
recalculates the number of samples genotyped, the number of alleles
called and the MAF to execute the remaining filters. 
Reads from standard input unless the -i option is used.
Writes to standard output unless the -o option is used.
Since version 2.0.6, the default behavior does not perform any filtering.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file in VCF format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file in VCF format.
</option>
<option id="frs" type="FILE" attribute="regionsToFilter">
File with genomic regions in which variants should be filtered out.
The format of this file should contain three columns: Sequence name (chromosome), first position
in the sequence, and last position in the sequence. Both positions are assumed to be 1-based.
</option>
<option id="srs" type="FILE" attribute="regionsToSelect">
File with genomic regions in which variants should be selected.
The format of this file should contain three columns: Sequence name (chromosome), first position
in the sequence, and last position in the sequence. Both positions are assumed to be 1-based.
</option>
<option id="d" type="INT" attribute="minDistance">
Minimum distance between variants. Default: No filter
</option>
<option id="q" type="INT" attribute="minGenotypeQuality" defaultConstant="DEF_MIN_GENOTYPE_QUALITY">
Minimum genotyping quality score (GQ format field in the VCF). Genotype calls with lower GQ become undecided.
</option>
<option id="minRD" type="INT" attribute="minReadDepth" defaultConstant="DEF_MIN_READ_DEPTH">
Minimum read depth (as reported in the DP genotype format field) to keep a genotype call. Genotype calls with less reads become undecided.
</option>
<option id="s" type="BOOLEAN" attribute="keepBiallelicSNVs">
Keep only biallelic SNVs.
</option>
<option id="fi" type="BOOLEAN" attribute="filterInvariant">
Filter out sites in which only one allele is observed.
</option>
<option id="fir" type="BOOLEAN" attribute="filterInvariantReference">
Filter sites in which only the reference allele is observed.
</option>
<option id="fia" type="BOOLEAN" attribute="filterInvariantAlternative">
Filter out sites in which only one alternative allele is observed.
</option>
<option id="minI" type="INT" deprecated="true">
Deprecated. See new option -m
</option>
<option id="m" type="INT" attribute="minSamplesGenotyped" defaultConstant="DEF_MIN_SAMPLES_GENOTYPED">
Minimum number of samples genotyped to keep the variant.
</option>
<option id="minC" type="INT" deprecated="true">
Deprecated. See new option -minRD
</option>
<option id="minMAF" type="DOUBLE" attribute="minMAF" defaultConstant="DEF_MIN_MAF">
Minimum minor allele frequency over the samples in the VCF.
</option>
<option id="maxMAF" type="DOUBLE" attribute="maxMAF" defaultConstant="DEF_MAX_MAF">
Maximum minor allele frequency over the samples in the VCF.
</option>
<option id="minOH" type="DOUBLE" default="0" attribute="minOH" defaultConstant="DEF_MIN_OH">
Minimum observed heterozygosity over the samples in the VCF.
</option>
<option id="maxOH" type="DOUBLE" default="1" attribute="maxOH" defaultConstant="DEF_MAX_OH">
Maximum observed heterozygosity over the samples in the VCF.
</option>
<option id="g" type="GENOME" attribute="genome">
File with the reference genome to calculate the GC-Content of the region surrounding the variant.
</option>
<option id="minGC" type="DOUBLE" attribute="minGCContent" defaultConstant="DEF_MIN_GC_CONTENT">
Minimum percentage of GC of the 100bp region surrounding the variant.
</option>
<option id="maxGC" type="DOUBLE" attribute="maxGCContent" defaultConstant="DEF_MAX_GC_CONTENT">
Maximum percentage of GC of the 100bp region surrounding the variant.
</option>
<option id="maxCNVs" type="INT" attribute="maxSamplesCNVs">
Maximum number of samples with copy number variation in the region where the variant is located. Default: No filter
</option>
<option id="gene" type="STRING" attribute="geneId">
Id of the gene or the transcript related with the variant.
</option>
<option id="a" type="STRING" attribute="annotations">
Types of functional annotations related to the variant.
The types must coincide with sequence ontology terms (See README.txt for details).
</option>
<option id="saf" type="FILE" attribute="sampleIds">
File with the ids of the samples to be selected (or removed, see -fs option).
The file should have one line per sample, being the first column the sample id.
Other columns in the file are ignored.
</option>
<option id="fs" type="BOOLEAN" attribute="filterSamples">
Flag to remove the samples provided with the -saf option instead of selecting them.
</option> 
</command>

<command id="VCFConverter" class="ngsep.vcf.VCFConverter" groupId="VariantsDownstream" formerId="ConvertVCF">
<intro>Converts genotype calls in VCF format to other formats</intro>
<title>Convert VCF files to other formats</title>
<description>
Convert genotype calls in VCF format to other formats commonly used to perform
different kinds of downstream analysis
</description>
<option id="i" type="FILE" attribute="inputFile">
Input VCF file with variants and genotype data. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix of the output files.
</option>
<option id="darwin" type="BOOLEAN" attribute="printDarwin">
Generates the input files for DarWin.
</option>
<option id="eigensoft" type="BOOLEAN" attribute="printEigensoft">
Generates the input files for Eigensoft.
</option>
<option id="emma" type="BOOLEAN" attribute="printEmma">
Generates the input files for Emma.
</option>
<option id="fasta" type="BOOLEAN" attribute="printFasta">
Generates a virtual multiple sequence alignment in fasta format. It could be used to build distance based dendograms.
</option>
<option id="fineStructure" type="BOOLEAN" attribute="printFineStructure">
Generates the input files for FineStructure. The option -s is required for this format.
</option>
<option id="flapjack" type="BOOLEAN" attribute="printFlapjack">
Generates the input files for Flapjack.
</option>
<option id="genepop" type="BOOLEAN" attribute="printGenePop">
Generates the input format for GenePop.
</option>
<option id="GWASPoly" type="BOOLEAN" attribute="printGWASPoly">
Generates the input file for GWASPoly.
</option>
<option id="haploview" type="BOOLEAN" attribute="printHaploview">
Generates the input files for Haploview.
</option>
<option id="hapmap" type="BOOLEAN" attribute="printHapmap">
Generates the Hapmap format, which can be used in programs such as Tassel.
</option>
<option id="joinMap" type="BOOLEAN" attribute="printJoinMap">
Generates the input file to build genetic maps with JoinMap.
The options -p1 and -p2 are required for this format.
</option>
<option id="matrix" type="BOOLEAN" attribute="printMatrix">
Generates a simple ACGT format which can be imported to excel.
</option>
<option id="phase" type="BOOLEAN" attribute="printPhase">
Generates the input files for Phase. The option -s is required for this format.
</option>
<option id="plink" type="BOOLEAN" attribute="printPlink">
Generates the input files for Plink.
</option>
<option id="powerMarker" type="BOOLEAN" attribute="printPowerMarker">
Generates the input files for PowerMarker.
</option>
<option id="rrBLUP" type="BOOLEAN" attribute="printrrBLUP">
Generates the input format for rrBLUP.
</option>
<option id="spagedi" type="BOOLEAN" attribute="printSpagedi">
Generates the input files for Spagedi.
</option>
<option id="structure" type="BOOLEAN" attribute="printStructure">
Generates the input format for structure.
</option>
<option id="treeMix" type="BOOLEAN" attribute="printTreeMix">
Generates the input files for TreeMix.
The option -p is required for this format.
</option>

<option id="s" type="STRING" attribute="sequenceName">
Name of the sequence (chromosome) for conversion to PHASE.
</option>
<option id="p" type="FILE" attribute="populationFile">
File with population assignments for the samples.
A two column text file with the sample ids in the
first column and the ids of the populations in the
second column. Required for conversion to TreeMix.
</option>
<option id="p1" type="STRING" attribute="idParent1">
Id of the first parent for conversion to JoinMap.
</option>
<option id="p2" type="STRING" attribute="idParent2">
Id of the second parent for conversion to JoinMap.
</option>
</command>

<command id="VCFComparator" class="ngsep.vcf.VCFComparator" groupId="VariantsDownstream" formerId="CompareVCF">
<intro>Compares the genotype calls included in two different VCF files</intro>
<title>Comparing VCF files</title>
<description>
Compares the genotype calls included in two different VCF files.
Calculates the number and percentage of homozygous and heterozygous differences between every pair of samples.
It requires the FASTA file with the reference genome used to build the VCF files.
If only the first input file is provided, the function provides an internal comparison of the samples within the input file.
Writes to standard output unless the -o option is used to specify an output file.
See the README.txt file for further details of the output file.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file in VCF format. It can be gzip compressed.
</option>
<option id="i2" type="FILE" attribute="inputFile2">
Input file in VCF format to compare with the first file. It can be gzip compressed.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with the results of the comparison.
</option>
<option id="g" type="DOUBLE" attribute="minPCTGenotyped" defaultConstant="DEF_MIN_PCT_GENOTYPED">
Minimum percentage (0-100) of variants genotyped in both samples
</option>
<option id="d" type="DOUBLE" attribute="maxPCTDiffs" defaultConstant="DEF_MAX_PCT_DIFFS">
Maximum percentage (0-100) of differences between the pair of samples
</option>
</command>

<command id="VCFSummaryStats" class="ngsep.vcf.VCFSummaryStatisticsCalculator" groupId="VariantsDownstream" formerId="SummaryStats">
<intro>Generates a report with the numbers of variants included in a VCF file for different categories.</intro>
<title>Calculating summary statistics</title>
<description>
Generate a report with the variants included in a VCF file for different categories.
It is specially useful when a complete population is being processed and merged into a
single annotated file.
Reads from standard input unless the -i option is used to specify an input file.
Writes to standard output unless the -o option is used to specify an output file.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file in VCF format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with statistics.
</option>
<option id="m" type="INT" attribute="minSamplesGenotyped" defaultConstant="DEF_MIN_SAMPLES_GENOTYPED">
Minimum number of samples genotyped to accurately calculate the minor allele frequency.
</option>
</command>

<command id="VCFDiversityStats" class="ngsep.vcf.VCFDiversityCalculator" groupId="VariantsDownstream" formerId="DiversityStats">
<intro>
Calculates basic diversity statistics for each variant in a VCF file.
</intro>
<title>Calculating diversity statistics per site</title>
<description>
Calculates basic diversity statistics for each variant in a VCF file.
Reads from standard input unless the -i option is used to specify an input file.
Writes to standard output unless the -o option is used to specify an output file.
See the README.txt file for details on the output. 
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file in VCF format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with statistics.
</option>
<option id="p" type="FILE" attribute="samplesMap">
File with population assignments for the samples.
A two column text file with the sample ids in the
first column and the ids of the populations in the
second column.
</option>
</command>

<command id="VCFVariantDensityCalculator" class="ngsep.vcf.VCFVariantDensityCalculator" groupId="VariantsDownstream">
<intro>
Calculates the density of variants in a VCF file across the genome 
</intro>
<title>Calculating variants density</title>
<description>
Calculates the number of variants within a VCF file in non-overlapping windows across the genome.
Writes a text delimited file with four columns: sequence, window first, window last and number of variants.
Reads from standard input unless the -i option is used to specify an input file.
Writes to standard output unless the -o option is used to specify an output file.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file in VCF format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with statistics.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="w" type="INT" attribute="windowLength" defaultConstant="DEF_WINDOW_LENGTH">
Length of the window.
</option>
</command>

<command id="VCFDistanceMatrixCalculator" class="ngsep.vcf.VCFDistanceMatrixCalculator" groupId="VariantsDownstream">
<intro>
Calculates a genetic distance matrix from genomic variants in a given VCF file
</intro>
<title>Calculation of genetic distance matrices from VCF files</title>
<description>
Generates a distance matrix from a variants file in VCF format.
The matrix is calculated using the basic IBS (Identity by state) algorithm. However, four
options to infer the genotype call information are implemented. In particular, users can
choose predicted allele dosages of CNVs or direct estimations of allele dosage per site
per individual based on relative allele-specific read counts. The latter option is useful
to improve distance estimations in polyploids.
It writes the matrix of genetic distances in a generic format.
Reads from standard input unless the -i option is used to specify an input file.
Writes to standard output unless the -o option is used to specify an output file.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file in VCF format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with the distance matrix. See -f for options on the output format. 
</option>
<option id="s" type="INT" attribute="distanceSource" defaultConstant="DISTANCE_SOURCE_GENOTYPES_SIMPLE">
Source of information in the VCF file to calculate distances. 0 for simple genotype calls (GT format field),
1 for allele copy number (ACN format field), 2 for total copy number (total of ACN format field),
and 3 for raw allele depth (ADP or BSDP format fields).
</option>
<option id="f" type="INT" attribute="matrixType" defaultConstant="MATRIX_TYPE_FULL">
Matrix output format, 0 is full matrix, 1 lower-left matrix and 2 is upper right matrix.
</option>
<option id="p" type="INT" attribute="ploidy" defaultConstant="DEF_PLOIDY">
Default ploidy of the samples. Used if the distance source (-s option) is the raw allele depths
to recalculate allele dosage based on these counts.
</option>
</command>

<command id="HierarchicalClustering" class="ngsep.clustering.HierarchicalClustering" groupId="VariantsDownstream">
<intro>
Builds a dendrogram from a distance matrix
</intro>
<title>
Building dendrograms from a distance based clustering algorithm
</title>
<description>
Given a distance matrix file, this command builds a dendrogram for graphical display of genetic
distances using distance based methods. The distance matrix can be provided as an upper, lower
or full matrix. The dendrogram is written in Newick format.
Reads from standard input unless the -i option is used to specify an input file.
Writes to standard output unless the -o option is used to specify an output file.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file with a distance matrix.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with the dendrogram in Newick format.
</option>
<option id="a" type="INT" attribute="algorithm">
The algorithm to be used to build the dendrogram from one of the following options:
0: Classic Neighbor Joining algorithm.
1: FastNJ algorithm.
2: UPGMA algorithm.
Default: 0.
</option>
</command>


<command id="NeighborJoining" class="ngsep.clustering.NeighborJoining" groupId="VariantsDownstream" printHelp="false">
<intro>
Construct a neighbor joining dendrogam given a distance matrix file
</intro>
<title>DEPRECATED since version 5.0.0. Use HierarchicalClustering instead </title>
<description>
Given a distance matrix file, this command builds a dendogram for graphical display of genetic
distances using the Neighbor Joining algorithm. The distance matrix can be provided as an upper, lower
or full matrix. The dendrogam is written in Newick format.
Reads from standard input unless the -i option is used to specify an input file.
Writes to standard output unless the -o option is used to specify an output file.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file with a distance matrix.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with the dendrogam in Newick format. 
</option>
</command>

<command id="VCFAlleleSharingStats" class="ngsep.vcf.VCFAlleleSharingStatisticsCalculator" groupId="VariantsDownstream" formerId="AlleleSharingStats">
<intro>
Calculates allele sharing diversity statistics, either through windows or through genes
for inbred populations
</intro>
<title>Calculating allele sharing statistics</title>
<description>
Calculates allele sharing diversity statistics, either through windows across the genome 
or through the genes catalog of the species. This program calculates the pairwise differences between
every pair of samples in the VCF file and uses that information to calculate diversity statistics such
as the average number of pairwise differences per Kbp, Fst and Tajima D. This functionality should only
be applied to VCFs containing populations of inbred samples. Each group can either be one or more than
populations within the populations file. Multiple population names within one group should be separated
by comma (without white spaces).
The populations file is a tab-delimited text file with two columns: sample id and population id.
Reads from standard input unless the -i option is used to specify an input file.
Writes to standard output unless the -o option is used to specify an output file.
See the README.txt file for details on the output.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file in VCF format. It can be gzip compressed.
</option>
<option id="p" type="FILE" attribute="samples">
File with population assignments for the samples.
A two column text file with the sample ids in the first column and the ids of the populations in the second column.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with statistics. 
</option>
<option id="g1" type="STRING" attribute="populationsGroup1">
Comma-separated list of populations that should be considered as group 1.
</option>
<option id="g2" type="STRING" attribute="populationsGroup2">
Comma-separated list of populations that should be considered as group 2.
</option>
<option id="t" type="FILE" attribute="transcriptomeFile">
GFF3 file with the transcriptome. If this file is provided, statistics will be provided by gene and
not by window.
</option>
<option id="n" type="BOOLEAN" attribute="includeIntrons">
If set, introns will be included in the calculation of pairwise differences. Only useful if the
-t option is set.
</option>
<option id="w" type="INT" attribute="windowLength" defaultConstant="DEF_WINDOW_LENGTH">
Length of each genomic window to calculate pairwise differences between samples. 
</option>
<option id="s" type="INT" attribute="stepLength" defaultConstant="DEF_STEP_LENGTH">
Step between windows to calculate pairwise differences between samples.
</option>
</command>

<command id="VCFImpute" class="ngsep.variants.imputation.GenotypeImputer" groupId="VariantsDownstream" formerId="ImputeVCF">
<intro>
Imputes missing genotypes from unphased multilocus SNP genotype data in a VCF.
</intro>
<title>Genotype imputation</title>
<description>
This module allows imputation of missing genotypes from unphased multilocus SNP genotype data in a VCF.
The current version is a reimplementation of the Hidden Markov Model (HMM) implemented in the package fastPHASE
This implementation allows to process VCF files and produces its output also as a VCF.
However, only biallelic SNPs are imputed and included in the output VCF file.
The current version supports imputation of either highly homozygous or heterozygous populations.
Parental lines can be provided for both types of populations using the -p option.
The options -ip and -is tell the model that either the parental accessions (-ip) or the entire population (-is) are inbred samples with low heterozygosity.
In the latter mode, the model will only produce homozygous genotype calls.
See the README.txt file for details on the output files.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file in VCF format. It can be gzip compressed.
</option>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix of the output files. 
</option>
<option id="p" type="STRING" attribute="parentIds">
Comma-separated list of sample ids of the parents of the population.
Only to be used for bi-parental or multi-parental breeding populations.
</option>
<option id="k" type="INT" attribute="numHaplotypeClusters" defaultConstant="DEF_NUM_HAPLOTYPE_CLUSTERS">
Maximum number of groups in which local haplotypes will be clustered.
For bi-parental or multi-parental breeding populations please set explicitly
the number of parents of the population even if the list of parents is provided with the
-p option. This allows to take into account cases of populations in which some of
the parents are missing
</option>
<option id="w" type="INT" attribute="windowSize" defaultConstant="DEF_WINDOW_SIZE">
Window size as number of variants within each window.
</option>
<option id="v" type="INT" attribute="overlap" defaultConstant="DEF_OVERLAP">
Overlap as number of variants shared between neighbor windows.
</option>
<option id="c" type="DOUBLE" attribute="avgCMPerKbp" defaultConstant="DEF_AVG_CM_PER_KBP">
Estimated average number of centiMorgans per Kbp on euchromatic regions of the genome.
Typical values of this parameter are 0.001 for human populations, 0.004 for rice and 0.35
for yeast populations.
</option>
<option id="t" type="BOOLEAN" attribute="skipTransitionsTraining">
If set, transition probabilities in the HMM will NOT be updated during the Baum-Welch
training of the HMM. Not recommended unless the -c option is set to a value allowing a
reasonable initial estimation of the transition probabilities.
</option>
<option id="ip" type="BOOLEAN" attribute="inbredParents">
Specifies that parents of the population are inbred.
</option>
<option id="is" type="BOOLEAN" attribute="inbredSamples">
Specifies that the samples to impute are inbred.
</option>
</command>

<command id="VCFIntrogressionAnalysis" class="ngsep.vcf.VCFWindowIntrogressionAnalysis" groupId="VariantsDownstream" formerId="IntrogressionAnalysis">
<intro>Runs a window-based haplotype introgression analysis.</intro>
<title>Finding haplotype introgressions</title>
<description>
Runs a window-based analysis to identify the most common haplotype within each of the
populations described in the given populations file and then identify common haplotypes
of one population introgressed in samples of a different population. Although it can be
run on any VCF file, it is particularly designed to work with populations of inbred
samples.
Reads from standard input unless the -i option is used to specify an input file.
See the README.txt file for details on the output files.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input file in VCF format. It can be gzip compressed.
</option>
<option id="p" type="FILE" attribute="populationsFile">
File with population assignments for the samples.
A two column text file with the sample ids in the first column and the ids of the populations in the second column.
</option>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix of the output files. 
</option>
<option id="g" type="DOUBLE" attribute="minPCTGenotyped" defaultConstant="DEF_MIN_PCT_GENOTYPED">
Minimum percentage of samples genotyped within a population to identify the most common allele.
</option>
<option id="d" type="DOUBLE" attribute="minDiffAF" defaultConstant="DEF_MIN_DIFF_AF">
Minimum difference between reference allele frequencies of at least two populations
to consider a variant discriminative.
</option>
<option id="m" type="DOUBLE" attribute="maxMAFWithin" defaultConstant="DEF_MAX_MAF_WITHIN">
Maximum minor allele frequency within a population to consider the major allele of a
variant as representative allele for such population.
</option>
<option id="w" type="INT" attribute="windowSize" defaultConstant="DEF_WINDOW_SIZE">
Window size as number of variants within each window.
</option>
<option id="v" type="INT" attribute="overlap" defaultConstant="DEF_OVERLAP">
Overlap as number of variants shared between neighbor windows.
</option>
<option id="a" type="INT" attribute="matchScore" defaultConstant="DEF_MATCH_SCORE">
Score given of a match between a sample homozygous genotype call and a population major allele.
</option>
<option id="t" type="INT" attribute="mismatchScore" defaultConstant="DEF_MISMATCH_SCORE">
Score given of a mismatch between a sample homozygous genotype call and a population major allele.
</option>
<option id="s" type="INT" attribute="minScore" defaultConstant="DEF_MIN_SCORE">
Minimum score to match a sample haplotype with a population-derived haplotype.
</option>
<option id="c" type="BOOLEAN" attribute="printVCF">
Outputs a VCF file with the biallelic variants that showed segregation between at least one
pair of groups and hence were selected for the analysis. 
</option>
<option id="u" type="BOOLEAN" attribute="printUnassigned">
If set, reports introgression events for unassigned haplotypes according to the minimum score defined by
the options -a -t and -s.
</option>
</command>

<command id="VCFRelativeCoordinatesTranslator" class="ngsep.gbs.VCFRelativeCoordinatesTranslator" groupId="VariantsDownstream">
<intro>
Maps VCF files build with the DeNovoGBS command to a reference genome
</intro>
<title>Mapping de-novo GBS variants to a genome</title>
<description>
Given a VCF file with coordinates relative to a set of consensus sequences, and a reference genome, aligns the consensus sequences
and provides a new VCF file with coordinates relative to the reference genome. This command is useful to quickly translate variants
identified with the DeNovoGBS command to an assembled genome.
See the README.txt file for details on the output files.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input VCF file having variants with coordinates relative to a given set of consensus sequences. 
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix of the output files.
</option>
<option id="b" type="FILE" attribute="filenameAlignmentBAM">
BAM file with alignments of the consensus sequences to the given reference genome.
</option>
<option id="c" type="FILE" attribute="filenameConsensusFA">
Fasta file with consensus sequences. Only used if the -b option is not used.
</option>
<option id="d" type="FILE" attribute="fmIndexFile">
FM-index file of the reference genome calculated with the command GenomeIndexer.
Only used if the consensus sequences are provided in FASTA format (See option -c). 
</option>
</command>

<command id="MutatedPeptidesExtractor" class="ngsep.transcriptome.MutatedPeptidesExtractor" groupId="VariantsDownstream" printHelp="false">
<intro>Generates a report of mutated peptides from a VCF file with variants.
</intro>
<title>Extracting mutated peptides</title>
<description>
Generates a report of mutated peptides from a VCF file with variants.
Requires a gff3 file with gene annotations, and the reference genome in fasta format.
Reads from standard input unless the -i option is used to specify an input file.
Writes to standard output unless the -o option is used to specify an output file.
See the README.txt file for further details of input and output files.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input VCF file with variants to annotate. It can be gzip compressed.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="t" type="FILE" attribute="transcriptomeFile">
Input GFF3 file with gene annotations.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with the report of mutated peptides.
</option>
<option id="m" type="STRING" attribute="mutatedSampleId">
Id of the mutated sample.
</option>
<option id="c" type="STRING" attribute="controlSampleId">
Id of the control sample.
</option>
<option id="l" type="INT" attribute="maxLength" defaultConstant="DEF_MAX_LENGTH">
Maximum peptide length.
</option>
</command>

<command id="SingleIndividualSimulator" class="ngsep.simulation.SingleIndividualSimulator" groupId="Benchmark">
<intro>
Simulates a single individual with homozygous and heterozygous mutations from a reference genome
</intro>
<title>Simulating individuals from a reference genome</title>
<description>
This simulator takes a (haploid) genome assembly and simulates a single individual including
homozygous and heterozygous mutations (SNPs, indels and mutated STRs) relative to the input assembly.
It produces two files, a fasta file with the simulated genome, and a phased VCF file with the simulated variants.
</description>
<option id="i" type="GENOME" attribute="genome">
Fasta file with the genome to simulate an individual.
</option>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix of the output files.
</option>
<option id="s" type="DOUBLE" defaultConstant="DEF_SNV_RATE" attribute="snvRate">
Proportion of reference basepairs with simulated SNV events.
</option>
<option id="n" type="DOUBLE" defaultConstant="DEF_INDEL_RATE" attribute="indelRate">
Proportion of reference basepairs with simulated indel events.
</option>
<option id="f" type="DOUBLE" defaultConstant="DEF_MUTATED_STR_FRACTION" attribute="mutatedSTRFraction">
Fraction of input STRs for which a mutation will be simulated.
</option>
<option id="t" type="FILE" attribute="strsFile">
Path to a text file describing the known STRs in the given genome.
</option>
<option id="u" type="INT" defaultConstant="DEF_STR_UNIT_INDEX" attribute="strUnitIndex">
Zero-based index in the STR file where the unit sequence is located.
</option>
<option id="d" type="STRING" defaultConstant="DEF_SAMPLE_ID" attribute="sampleId">
ID of the simulated sample. Appears in the VCF header and as part of the name of the sequences in the simulated genome.
</option>
<option id="p" type="INT" defaultConstant="DEF_PLOIDY" attribute="ploidy">
Ploidy of the simulated sample.
</option>
</command>

<command id="SingleReadsSimulator" class="ngsep.simulation.SingleReadsSimulator" groupId="Benchmark">
<intro>
Generates random single reads from a given reference genome
</intro>
<title>Simulating reads</title>
<description>
Generates single reads randomly distributed from a given reference genome. 
</description>
<option id="i" type="GENOME" attribute="genome">
Fasta file with the genome to simulate reads.
</option>
<option id="o" type="FILE" attribute="outputFile">
Gzip compressed output file with simulated reads. See option -f for options on the file format.
</option>
<option id="n" type="INT" attribute="numberOfReads" defaultConstant="DEF_NUM_READS">
Number of reads.
</option>
<option id="u" type="INT" attribute="meanReadLength" defaultConstant="DEF_MEAN_READ_LENGTH">
Average read length.
</option>
<option id="s" type="INT" attribute="stdevReadLength" defaultConstant="DEF_STDEV_READ_LENGTH">
Standard deviation read length.
</option>
<option id="m" type="INT" attribute="minReadLength" defaultConstant="DEF_MIN_READ_LENGTH">
Minimum read length.
</option>
<option id="e" type="DOUBLE" attribute="substitutionErrorRate" defaultConstant="DEF_SUBSTITUTION_ERROR_RATE">
Substitution error rate.
</option>
<option id="d" type="DOUBLE" attribute="indelErrorRate" defaultConstant="DEF_INDEL_ERROR_RATE">
Indel error rate.
</option>
<option id="f" type="INT" attribute="outFormat" defaultConstant="OUT_FORMAT_FASTQ">
Output format. 0 for fastq, 1 for fasta.
</option>
</command>

<command id="TillingPopulationSimulator" class="ngsep.simulation.TillingPopulationSimulator" groupId="Benchmark">
<intro>
Simulates a TILLING experiment
</intro>
<title>Simulating TILLING experiments</title>
<description>
Simulates a mutagenized population from selected regions on the given reference genome.
Distributes samples in pools and simulates reads from amplicons assigned to each pool.
See the README.txt file for further details of the output files.
</description>
<option id="i" type="FILE" attribute="sequencedRegionsFile">
File with the description of the regions that will be used as amplicons for the simulation. 
</option>
<option id="g" type="GENOME" attribute="genome">
Fasta file with the genome to simulate reads.
</option>
<option id="o" type="FILE" attribute="outputPrefix">
Prefix of the output files
</option>
<option id="d" type="INT" attribute="numIndividuals" defaultConstant="DEF_INDIVIDUALS">
Number of individuals to simulate. 
It should be less or equal than the product of the three dimensions of the pool design (parameters d1, d2 and d3).
</option>
<option id="n" type="INT" attribute="numFragmentsPool" defaultConstant="DEF_NUM_FRAGMENTS_POOL">
Number of fragments to sequence for each pool.
</option>
<option id="m" type="INT" attribute="numMutations" defaultConstant="DEF_NUM_MUTATIONS">
Number of mutations to generate.
</option>
<option id="u" type="INT" attribute="readLength" defaultConstant="DEF_READ_LENGTH">
Read length.
</option>
<option id="e1" type="DOUBLE" attribute="minErrorRate" defaultConstant="DEF_MIN_ERROR_RATE">
Minimum substitution error rate (at the 5' end).
</option>
<option id="e2" type="DOUBLE" attribute="maxErrorRate" defaultConstant="DEF_MAX_ERROR_RATE">
Maximum substitution error rate (at the 3' end).
</option>
<option id="d1" type="INT" attribute="poolDesignD1" defaultConstant="DEF_DESIGN_D1">
First dimension of the pool design.
</option>
<option id="d2" type="INT" attribute="poolDesignD2" defaultConstant="DEF_DESIGN_D2">
Second dimension of the pool design.
</option>
<option id="d3" type="INT" attribute="poolDesignD3" defaultConstant="DEF_DESIGN_D3">
Third dimension of the pool design.
</option>
</command>

<command id="VCFGoldStandardComparator" class="ngsep.benchmark.VCFGoldStandardComparator" groupId="Benchmark">
<intro>
Compares a gold standard phased VCF with a VCF with test genotype calls
</intro>
<title>Benchmarking variant calls</title>
<description>
Takes a VCF file with genotype information from one sample, the reference genome used to build
the VCF and a phased VCF file with gold standard calls and calculates quality statistics
comparing gold-standard with test calls. 
Writes to standard output unless the -o option is used to specify an output file.
See the README.txt file for details on the output.
</description>
<option id="i" type="FILE" attribute="inputFile">
Input test file in VCF format. It can be gzip compressed.
</option>
<option id="g" type="FILE" attribute="gsFile">
Gold standard file in VCF format. It can be gzip compressed.
</option>
<option id="r" type="GENOME" attribute="genome">
Fasta file with the reference genome.
</option>
<option id="o" type="FILE" attribute="outputFile">
Output file with statistics. 
</option>
<option id="c" type="FILE" attribute="complexRegions">
File with coordinates of complex regions (such as STRs).
</option>
<option id="f" type="FILE" attribute="confidenceRegions">
File with coordinates of regions in which the gold standard can be trusted.
</option>
<option id="e" type="BOOLEAN" attribute="genomicVCF">
Indicates that the gold standard VCF is genomic, which means that confidence regions can be
extracted from annotated regions with homozygous reference genotypes.
</option>
</command>

</software>
